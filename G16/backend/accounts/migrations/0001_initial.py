# Generated by Django 4.2.16 on 2025-05-15 21:40

import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Background',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(help_text='Title or degree name', max_length=100)),
                ('institution', models.CharField(help_text='Name of the educational or professional institution', max_length=100)),
                ('background_type', models.CharField(choices=[('ACADEMIC', 'Academic'), ('PROFESSIONAL', 'Professional')], help_text='Type of background: academic or professional', max_length=12)),
                ('start_year', models.PositiveIntegerField(help_text='Start year of this background entry')),
                ('end_year', models.PositiveIntegerField(help_text='End year or graduation year')),
            ],
            options={
                'verbose_name': 'Background',
                'verbose_name_plural': 'Backgrounds',
                'ordering': ['-start_year'],
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('username', models.CharField(help_text='Unique username, lowercase enforced', max_length=150, unique=True)),
                ('email', models.EmailField(help_text='User email address', max_length=254, unique=True)),
                ('cpf', models.CharField(help_text='CPF in the format XXX.XXX.XXX-XX', max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message='CPF must be in XXX.XXX.XXX-XX format', regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$')])),
                ('first_name', models.CharField(help_text='First name of the member', max_length=30)),
                ('last_name', models.CharField(help_text='Last name of the member', max_length=30)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number, include country code if needed', max_length=15, null=True)),
                ('description', models.TextField(blank=True, help_text='Brief description or bio')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('backgrounds', models.ManyToManyField(blank=True, help_text='Educational and professional backgrounds', related_name='members', to='accounts.background')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Member',
                'verbose_name_plural': 'Members',
            },
        ),
        migrations.CreateModel(
            name='CommunityLeader',
            fields=[
            ],
            options={
                'verbose_name': 'Community Leader',
                'verbose_name_plural': 'Community Leaders',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('accounts.member',),
        ),
        migrations.CreateModel(
            name='Administrator',
            fields=[
            ],
            options={
                'verbose_name': 'Administrator',
                'verbose_name_plural': 'Administrators',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('accounts.communityleader',),
        ),
    ]
